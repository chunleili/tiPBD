"""rep(means reproduced) 是可以复现pyamg的"""
import numpy as np
import scipy
from scipy.io import mmread, mmwrite
import scipy.sparse as sparse
import os, sys
from time import perf_counter
from matplotlib import pyplot as plt
import pyamg
from pyamg.gallery import poisson
from pyamg.relaxation.smoothing import change_smoothers
from collections import namedtuple

# from pyamg.relaxation import make_system
# from pyamg import amg_core

sys.path.append(os.getcwd())



def test_amg(mat_size = 10):
    # ------------------------------- prepare data ------------------------------- #
    generate_data = True

    if(generate_data):
        print("generating data...")
        A, b = generate_A_b_pyamg(n=mat_size)
    else:
        print("loading data...")
        A = scipy.io.mmread("E:/Dev/mgxpbd/data/misc/A_10.mtx")
        A = A.tocsr()
        b = np.loadtxt("E:/Dev/mgxpbd/data/misc/b_10.txt", dtype=np.float32)

    # generate R by pyamg
    ml = pyamg.ruge_stuben_solver(A, max_levels=2)
    P = ml.levels[0].P
    R = ml.levels[0].R
    # R = mmread("R.mtx")
    # P = mmread("P.mtx")
    print(f"R: {R.shape}, P: {P.shape}")

    # ------------------------------- test solvers ------------------------------- #
    x0 = np.zeros_like(b)

    print("Solving pyamg...")
    r_norms_pyamg = []
    x_pyamg = timer_wrapper(solve_pyamg, ml, b, r_norms_pyamg)

    print("Solving rep...")
    r_norms_rep = []
    x_rep = timer_wrapper(solve_rep, A, b, x0, R, P, r_norms_rep)

    print("Solving simplest...")
    r_norms_simplest = []
    x_simplest = timer_wrapper(solve_simplest, A, b, R, P, r_norms_simplest)

    # ------------------------------- print results ------------------------------- #
    print_residuals(r_norms_pyamg, "pyamg")
    print_residuals(r_norms_rep, "rep")
    print_residuals(r_norms_simplest, "simplest")
    
    fig, axs = plt.subplots(2, 1, figsize=(8, 8))
    plot_r_norms(r_norms_pyamg, axs[0], title="pyamg",linestyle="-",label="pyamg")
    plot_r_norms(r_norms_pyamg, axs[1], title="repr",linestyle="-",label="pyamg")
    plot_r_norms(r_norms_rep, axs[1], title="repr", linestyle="--",label="rep")
    plot_r_norms(r_norms_simplest, axs[1], title="repr", linestyle="-.",label="simplest")
    plt.tight_layout()
    plt.show()


def timer_wrapper(func, *args, **kwargs):
    t = perf_counter()
    result = func(*args, **kwargs)
    print(f"{func.__name__} took {perf_counter() - t:.3e} s")
    return result


def generate_A_b_pyamg(n=10):
    # ---------------------- data generated by pyamg poisson --------------------- #
    A = poisson((n, n), format="csr")
    b = np.random.rand(A.shape[0])
    print(f"A: {A.shape}, b: {b.shape}")

    save = True
    if save:
        mmwrite("A.mtx", A)
        np.savetxt("b.txt", b)
    return A, b

def print_residuals(residuals, name="residuals"):
    for i, r in enumerate(residuals):
        print(f"{name}[{i}] = {r:.3e}")



def solve_pyamg(ml, b, r_norms=[]):
    x = ml.solve(b, tol=1e-3, residuals=r_norms, maxiter=1)
    return x


def solve_rep(A, b, x0, R, P, r_norms=[]):
    tol = 1e-3
    residuals = r_norms
    maxiter = 1

    A2 = R @ A @ P

    x = x0

    normb = np.linalg.norm(b)
    if normb == 0.0:
        normb = 1.0  # set so that we have an absolute tolerance
    normr = np.linalg.norm(b - A @ x)
    if residuals is not None:
        residuals[:] = [normr]  # initial residual

    b = np.ravel(b)
    x = np.ravel(x)

    it = 0
    while True:  # it <= maxiter and normr >= tol:
        gauss_seidel(A, x, b, iterations=1)  # presmoother

        residual = b - A @ x

        coarse_b = R @ residual  # restriction

        coarse_x = np.zeros_like(coarse_b)

        coarse_x[:] = scipy.sparse.linalg.spsolve(A2, coarse_b)

        x += P @ coarse_x  # coarse grid correction

        gauss_seidel(A, x, b, iterations=1)  # postsmoother

        it += 1

        normr = np.linalg.norm(b - A @ x)
        if residuals is not None:
            residuals.append(normr)
        if normr < tol * normb:
            return x
        if it == maxiter:
            return x



def gauss_seidel(A, x, b, iterations=1):
    if not sparse.isspmatrix_csr(A):
        raise ValueError("A must be csr matrix!")

    for _iter in range(iterations):
        # forward sweep
        # print("forward sweeping")
        for _ in range(iterations):
            amg_core_gauss_seidel(A.indptr, A.indices, A.data, x, b, row_start=0, row_stop=int(len(x)), row_step=1)

        # backward sweep
        # print("backward sweeping")
        for _ in range(iterations):
            amg_core_gauss_seidel(
                A.indptr, A.indices, A.data, x, b, row_start=int(len(x)) - 1, row_stop=-1, row_step=-1
            )
    return x


def amg_core_gauss_seidel(Ap, Aj, Ax, x, b, row_start: int, row_stop: int, row_step: int):
    for i in range(row_start, row_stop, row_step):
        start = Ap[i]
        end = Ap[i + 1]
        rsum = 0.0
        diag = 0.0

        for jj in range(start, end):
            j = Aj[jj]
            if i == j:
                diag = Ax[jj]
            else:
                rsum += Ax[jj] * x[j]

        if diag != 0.0:
            x[i] = (b[i] - rsum) / diag


def solve_simplest(A, b, R, P, residuals):
    tol = 1e-3
    maxiter = 1
    A2 = R @ A @ P
    x0 = np.zeros_like(b) # initial guess x0
    x = x0
    normb = np.linalg.norm(b)
    if normb == 0.0:
        normb = 1.0  # set so that we have an absolute tolerance
    normr = np.linalg.norm(b - A @ x)
    if residuals is not None:
        residuals[:] = [normr]  # initial residual
    b = np.ravel(b)
    x = np.ravel(x)
    it = 0
    while True:  # it <= maxiter and normr >= tol:
        residual = b - A @ x
        coarse_b = R @ residual  # restriction
        coarse_x = np.zeros_like(coarse_b)
        coarse_x[:] = scipy.sparse.linalg.spsolve(A2, coarse_b)
        x += P @ coarse_x 
        amg_core_gauss_seidel(A.indptr, A.indices, A.data, x, b, row_start=0, row_stop=int(len(x0)), row_step=1)
        it += 1
        normr = np.linalg.norm(b - A @ x)
        if residuals is not None:
            residuals.append(normr)
        if normr < tol * normb:
            return x
        if it == maxiter:
            return x

def plot_r_norms(data, ax, *args, **kwargs):
    title = kwargs.pop("title", "")
    linestyle = kwargs.pop("linestyle", "-")
    label = kwargs.pop("label", "")
    x = np.arange(len(data))
    ax.plot(x, data, label=label, linestyle=linestyle, *args, **kwargs)
    ax.set_title(title)
    # ax.set_yscale("log")
    ax.set_xlabel("iteration")
    ax.set_ylabel("residual")
    ax.legend(loc="upper right")

if __name__ == "__main__":
    test_amg(10)
    # test_amg(20)
    # test_amg(30)
    # test_amg(50)
    # test_amg(100)
